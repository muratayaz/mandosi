generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Image {
  id       String     @id @default(cuid())
  publicId String     @unique
  format   String
  version  String
  url      String
  Orders   Orders[]
  Customer Customer[]
}

model Customer {
  id        Int       @id @default(autoincrement())
  name      String
  email     String?
  phone     String?
  address   String?
  birthday  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  imageId String?
  image   Image?  @relation(fields: [imageId], references: [id], onDelete: Cascade)

  detailId Int     @unique
  Detail   Detail? @relation(fields: [detailId], references: [id], onDelete: Cascade)

  Orders Orders[]
}

model Detail {
  id           Int     @id @default(autoincrement())
  breast       String?
  belly        String?
  ispala       String?
  roba         String?
  shirtSize    String?
  coatSize     String?
  pantSize     String?
  shirtArmSize String?
  coatArmSize  String?
  frontRoba    String?
  arm          String?
  waist        String?
  hip          String?
  ag           String?
  knee         String?
  trot         String?
  pazu         String?
  cuff         String?
  embroidery   String?
  collor       String?
  collarModel  String?
  shoeSize     String?
  pens         String?
  frontSize    String?
  backSize     String?

  customer Customer?
  order    Orders?
}

enum OrderType {
  CEKET
  PANTOLON
  GOMLEK
  YELEK
  KABAN
  AYAKKABI
  DIGER
}

enum PaymentType {
  KREDIKARTI
  HAVALE
  NAKIT
  EURO
  DOLAR
}

model Orders {
  id Int @id @default(autoincrement())

  imageId String?
  image   Image?  @relation(fields: [imageId], references: [id], onDelete: Cascade)

  paymentType PaymentType?
  price       Int?
  paid        Int?

  type         OrderType?
  deliveryDate DateTime?
  trialDate    DateTime?
  trialDate2   DateTime?
  description  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  detialId Int    @unique
  Detail   Detail @relation(fields: [detialId], references: [id], onDelete: Cascade)

  customerId Int?
  Customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
}
